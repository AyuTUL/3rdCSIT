program:
lagrange
heun 3
#include<stdio.h>
#define f(x,y) ((x)*(x)+(y)*(y))
int main()
{
	float x,xp,x0,y0,y,h,m1,m2;
	printf("Enter initial values of x and y : ");
	scanf("%f%f",&x0,&y0);
	printf("Enter the point at which function is to be evaluated : ");
	scanf("%f",&xp);
	printf("Enter step size : ");
	scanf("%f",&h);
	y=y0;
	x=x0;
	printf("Using Heun's method,");
	for(x=x0;x<xp;x+=h)
	{
		m1=f(x,y);
		m2=f(x+h,y+h*m1);
		y+=((h/2)*(m1+m2));
		printf("\n\ty(%.2f) = %.5f",x+h,y);
	}
	return 0;
}

newton divided difference interpolation
#include<stdio.h>
#define MAX 10
int main()  
{
	float v=0,p,xv,x[MAX],fx[MAX],a[MAX];
	int n,i,j;
	printf("Enter order of polynomial : ");
	scanf("%d",&n);
	printf("Enter x and f(x) for %d data set : \n",n+1);
	for(i=0;i<=n;i++)
		scanf("%f%f",&x[i],&fx[i]);
	printf("Enter the point at which polynomial is to be evaluated : ");
	scanf("%f",&xv);
	for(i=0;i<=n;i++)
		a[i]=fx[i];
	for(i=0;i<=n;i++)
		for(j=n;j>i;j--)
			a[j]=(a[j]-a[j-1])/(x[j]-x[j-1-i]);
	v=0;
	for(i=0;i<=n;i++)
	{
		p=1;
		for(j=0;j<=i-1;j++)
			p*=(xv-x[j]);
		v+=a[i]*p;
	}
	printf("\nf(%g) = %.5f",xv,v);
	return 0;
}

gauss elimination:
#include <stdio.h>
#include <math.h>
#define MAX 10
void swapRows(float a[MAX][MAX+1],int row1,int row2,int n) 
{
    float temp;
    for(int i=0;i<=n;i++) 
    {
        temp=a[row1][i];
        a[row1][i]=a[row2][i];
        a[row2][i]=temp;
    }
}
int main() 
{
    int n,i,j,k,maxRow;
    float a[MAX][MAX+1],x[MAX],ratio;
	printf("Enter no. of equations : ");
    scanf("%d",&n);
    printf("Enter coefficients of the equations :\n");
    for(i=0;i<n;i++) 
	{
        printf("Equation %d : ",i+1);
        for(j=0;j<=n;j++)
            scanf("%f",&a[i][j]);
    }
    for(i=0;i<n-1;i++) 
	{
		maxRow=i;
		for(j=i+1;j<n;j++)
            if(fabs(a[j][i])>fabs(a[maxRow][i]))
                maxRow=j;
        if(maxRow!=i)
            swapRows(a,i,maxRow,n);
        if(fabs(a[i][i])<0.000001)
		{
            printf("Mathematical Error: Division by zero or pivot too small.\n");
            return 1;
        }
        for(j=i+1;j<n;j++) 
		{
            ratio=a[j][i]/a[i][i];
            for(k=i;k<=n;k++)
                a[j][k]-=ratio*a[i][k];
        }
    }
    x[n-1]=a[n-1][n]/a[n-1][n-1];
    for(i=n-2;i>=0;i--) 
	{
        x[i]=a[i][n];
        for(j=i+1;j<n;j++)
            x[i]-=a[i][j]*x[j];
        x[i]/=a[i][i];
    }
    printf("Using basic Gauss elimination method,");
    printf("\nSolution:");
    for(i=0;i<n;i++)
        printf("\nx%d = %.5f",i+1,x[i]);
    return 0;
}

horner:
#include<stdio.h>
#define MAX 10
int main()
{
	int a[MAX],b[MAX],v,i,xv,n;
	printf("Enter degree of polynomial : ");
	scanf("%d",&n);
	printf("Enter coefficients of polynomial of order %d (a%d - a0) : ",n,n);
	for(i=n;i>=0;i--)
		scanf("%d",&a[i]);
	printf("Enter the point at which polynomial is to be evaluated : ");
	scanf("%d",&xv);
	b[n]=a[n];
	for(i=n;i>0;i--)
		b[i-1]=a[i-1]+b[i]*xv;
	printf("\nFor polynomial f(x) =");
	for(i=n;i>=0;i--)
		printf(" %+dx^%d ",a[i],i);
	printf("\nf(%d) = ",xv);
	for(i=n;i>=0;i--)
		printf("%+d(%d)^%d ",a[i],xv,i);
	printf("= %d",b[0]);
	return 0;
}
derive:
newton raphson
secant 3
bisection
fixed point iteraiton
horner

revise:
spline
gauss integration
romberg


