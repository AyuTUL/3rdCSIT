newton vs secant
newton				secant
needs 1st derivative of fn	uses finite difference
1 initial guess			2 initial guesses
quadratic convergence (faster)	superlinear convergeance(slower)
when derivative is easy		when dx is difficult
more expensive, derivative	less expensive no dx 

drawbacks of newton rpahson:
-requires derivative
-poor initial guess leads to divergence/convergence to
wrong root
-if dx=0 method wont work due to div by 0
-may not converge for function with steep inflection point
-not guarantee to find root unless guess is close

divided difference interpolation:
#include<stdio.h>
#define MAX 10
int main()  
{
	float v=0,p,xv,x[MAX],fx[MAX],a[MAX];
	int n,i,j;
	printf("Enter order of polynomial : ");
	scanf("%d",&n);
	printf("Enter x and f(x) for %d data set : \n",n+1);
	for(i=0;i<=n;i++)
		scanf("%f%f",&x[i],&fx[i]);
	printf("Enter the point at which polynomial is to be evaluated : ");
	scanf("%f",&xv);
	for(i=0;i<=n;i++)
		a[i]=fx[i];
	for(i=0;i<=n;i++)
		for(j=n;j>i;j--)
			a[j]=(a[j]-a[j-1])/(x[j]-x[j-1-i]);
	v=0;
	for(i=0;i<=n;i++)
	{
		p=1;
		for(j=0;j<=i-1;j++)
			p*=(xv-x[j]);
		v+=a[i]*p;
	}
	printf("\nf(%g) = %.5f",xv,v);
	return 0;
}

gauss elim vs gauss jordan
gauss elim			gauss jordan
forwards elim + back substitue	forward elimination+ reduce to I matrix
row echelon form		reduced row echelon form
upper triangular matrix		identity matrix
computaiton cost is less	more
easy for large system		complex
solving system of eqns		inverse of matrix

interpolation:
given n+1 data points says x0,y0 ,x1,y1,...xn,yn. interpolation
is the processof finding a polynomial function of order n which 
passes through thsese data points and finding the value of y at some 
point say xk (x0<=xk<=xn)

extrapolation:
given n+1 data points says x0,y0 ,x1,y1,...xn,yn. extrapolation
is the processof finding a polynomial function of order n which 
passes through thsese data points and finding the value of y at some 
point say xk (xk<x0 and xk>xn)

approximate error:
difference between values of 2 successive iterations in
iterative method
Ea=|xn-xn-1|

relative error:
approximate error expressed as fraction/% of current value
Er=|xn-xn-1/xn|x100%
scale independent